plugins {
	id "java"
	id "org.springframework.boot" version "3.3.0"
    id "io.spring.dependency-management" version "1.1.5"
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
    id "com.diffplug.spotless" version "6.25.0"
}

group = "{{ .GroupID }}"
version = "{{ .AppVersion }}"

java {
	sourceCompatibility = "21"
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
	mavenCentral()
}

ext {
  set('springdocOpenapiVersion', "2.5.0")
{{- if .SpringCloudAWSSupport }}
  set('awspringVersion', "3.1.1")
{{ end }}
{{- if .SpringModulithSupport }}
  set('springModulithVersion', "1.2.0")
{{ end }}
{{- if .ThymeleafSupport }}
  set('bootstrapVersion', "5.3.3")
  set('jqueryVersion', "3.7.1")
  set('fontawesomeVersion', "6.5.2")
{{ end }}
{{- if .HTMXSupport }}
  set('htmxVersion', "1.9.12")
  set('htmxSpringBootThymeleafVersion', "3.3.0")
{{ end }}
{{- if .JwtSecuritySupport }}
  set('jjwtVersion', "0.11.5")
{{ end }}
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    {{- if .SecuritySupport }}
    implementation "org.springframework.boot:spring-boot-starter-security"
    {{ end }}
    {{- if .ThymeleafSupport }}
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect"
    {{- if .SecuritySupport }}
    implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity6"
    {{ end }}
    {{- if .HTMXSupport }}
    implementation "io.github.wimdeblauwe:htmx-spring-boot-thymeleaf:${htmxSpringBootThymeleafVersion}"
    {{ end }}
    {{ end }}
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocOpenapiVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    {{- if eq .DbType "PostgreSQL" }}
    runtimeOnly "org.postgresql:postgresql"
    {{ end -}}
    {{- if eq .DbType "MySQL" }}
    runtimeOnly "com.mysql:mysql-connector-j"
    {{ end -}}
    {{- if eq .DbType "MariaDB" }}
    runtimeOnly "org.mariadb.jdbc:mariadb-java-client"
    {{ end -}}
    {{- if eq .DbMigrationTool "Flyway"}}
    {{- if eq .DbType "PostgreSQL" }}
    runtimeOnly "org.flywaydb:flyway-database-postgresql"
    {{ end -}}
    implementation "org.flywaydb:flyway-core"
    {{ if or (eq .DbType "MySQL") (eq .DbType "MariaDB") }}
    implementation "org.flywaydb:flyway-mysql"
    {{ end }}
    {{ end -}}
    {{- if eq .DbMigrationTool "Liquibase"}}
    implementation "org.liquibase:liquibase-core"
    {{ end -}}
    {{- if .SpringModulithSupport }}
    implementation "org.springframework.modulith:spring-modulith-starter-core"
    implementation "org.springframework.modulith:spring-modulith-actuator"
    implementation "org.springframework.modulith:spring-modulith-docs"
    {{ end }}
    {{- if .SpringCloudAWSSupport }}
    implementation "io.awspring.cloud:spring-cloud-aws-starter"
    implementation "io.awspring.cloud:spring-cloud-aws-starter-s3"
    {{ end }}
    {{- if .ThymeleafSupport }}
    implementation "org.webjars:bootstrap:${bootstrapVersion}"
    implementation "org.webjars:jquery:${jqueryVersion}"
    implementation "org.webjars:font-awesome:${fontawesomeVersion}"
    {{ end }}
    {{- if .HTMXSupport }}
    implementation "org.webjars.npm:htmx.org:${htmxVersion}"
    {{ end }}
    {{- if .JwtSecuritySupport }}
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    {{ end }}

    developmentOnly "org.springframework.boot:spring-boot-devtools"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    {{ if or .SecuritySupport .JwtSecuritySupport }}
    testImplementation "org.springframework.security:spring-security-test"
    {{ end }}
    {{- if .SpringModulithSupport }}
    testImplementation "org.springframework.modulith:spring-modulith-starter-test"
    {{ end }}
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "org.testcontainers:junit-jupiter"
    {{- if eq .DbType "PostgreSQL" }}
    testImplementation "org.testcontainers:postgresql"
    {{ end -}}
    {{- if eq .DbType "MySQL" }}
    testImplementation "org.testcontainers:mysql"
    {{ end -}}
    {{- if eq .DbType "MariaDB" }}
    testImplementation "org.testcontainers:mariadb"
    {{ end -}}
    {{- if .SpringCloudAWSSupport }}
    testImplementation "org.testcontainers:localstack"
    {{ end }}
    testImplementation "io.rest-assured:rest-assured"
}

dependencyManagement {
    imports {
        {{- if .SpringCloudAWSSupport }}
        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${awspringVersion}"
        {{ end }}
        {{- if .SpringModulithSupport }}
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
        {{ end }}
    }
}

tasks.named("bootBuildImage") {
	builder = "dashaun/builder:tiny"
	imageName = "your_dockerhub_username/${project.name}"
}

tasks.named("test") {
	useJUnitPlatform()
	testLogging {
		events = ["PASSED", "FAILED", "SKIPPED"]
		showStandardStreams = true
		exceptionFormat = "full"
	}
}

gitProperties {
    failOnNoGitDirectory = false
    keys = [
            "git.branch",
            "git.commit.id.abbrev",
            "git.commit.user.name",
            "git.commit.message.full"
    ]
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        formatAnnotations()
        palantirJavaFormat("2.47.0")
    }
}