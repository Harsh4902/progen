package {{ .BasePackage }};

import static org.testcontainers.utility.DockerImageName.parse;

import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
import org.springframework.context.annotation.Bean;
{{- if eq .DbType "PostgreSQL" }}
import org.testcontainers.containers.PostgreSQLContainer;
{{ end -}}
{{- if eq .DbType "MySQL" }}
import org.testcontainers.containers.MySQLContainer;
{{ end -}}
{{- if eq .DbType "MariaDB" }}
import org.testcontainers.containers.MariaDBContainer;
{{ end }}
{{- if .SpringCloudAWSSupport }}
import org.springframework.test.context.DynamicPropertyRegistry;
import org.testcontainers.containers.localstack.LocalStackContainer;
{{ end }}
@TestConfiguration(proxyBeanMethods = false)
public class ContainersConfig {

{{ if eq .DbType "PostgreSQL" }}
    @Bean
    @ServiceConnection
    PostgreSQLContainer<?> postgres() {
        return new PostgreSQLContainer<>(parse("postgres:16-alpine")).withReuse(true);
    }
{{ end -}}
{{ if eq .DbType "MySQL" }}
    @Bean
    @ServiceConnection
    MySQLContainer<?> mysql() {
        return new MySQLContainer<>(parse("mysql:8.1.0")).withReuse(true);
    }
{{ end -}}
{{ if eq .DbType "MariaDB" }}
    @Bean
    @ServiceConnection
    MariaDBContainer<?> mariadb() {
        return new MariaDBContainer<>(parse("mariadb:11.0.3")).withReuse(true);
    }
{{ end -}}
{{- if .SpringCloudAWSSupport }}
    @Bean
    LocalStackContainer localstackContainer(DynamicPropertyRegistry registry) {
        LocalStackContainer localStackContainer =
                new LocalStackContainer(parse("localstack/localstack:3.0.0"));
        registry.add("spring.cloud.aws.credentials.access-key", localStackContainer::getAccessKey);
        registry.add("spring.cloud.aws.credentials.secret-key", localStackContainer::getSecretKey);
        registry.add("spring.cloud.aws.region.static", localStackContainer::getRegion);
        registry.add("spring.cloud.aws.endpoint", localStackContainer::getEndpoint);
        return localStackContainer;
    }
{{ end }}
}
